import{read as d,utils as f}from"./xlsx-BBMPxr6S.js";const u={jpeg:[[255,216,255,224],[255,216,255,225],[255,216,255,226],[255,216,255,227],[255,216,255,232],[255,216,255,219]],png:[[137,80,78,71,13,10,26,10]],gif:[[71,73,70,56,55,97],[71,73,70,56,57,97]],bmp:[[66,77]],webp:[[82,73,70,70]],tiff:[[73,73,42,0],[77,77,0,42]],ico:[[0,0,1,0]],mp3:[[73,68,51],[255,251],[255,243],[255,242]],mp4:[[0,0,0,24,102,116,121,112],[0,0,0,32,102,116,121,112],[0,0,0,20,102,116,121,112]],avi:[[82,73,70,70]],pdf:[[37,80,68,70]],zip:[[80,75,3,4],[80,75,5,6],[80,75,7,8]],rar:[[82,97,114,33,26,7,0]],sevenZ:[[55,122,188,175,39,28]],exe:[[77,90]],xls:[[208,207,17,224,161,177,26,225]]};class y{static async validateFile(e){const t=e.name;try{if(e.size===0)return{isValid:!1,error:"File is empty",filename:t};if(e.size>50*1024*1024)return{isValid:!1,error:"File size exceeds 50MB limit",filename:t};const a=await this.readFileHeader(e,128),i=this.detectFileTypeByContent(a,e);return i.detectedType&&!this.isAllowedType(i.detectedType)?{isValid:!1,error:`File is actually ${i.detectedType.toUpperCase()}, not a spreadsheet. Upload rejected for security.`,detectedType:i.detectedType,filename:t,confidence:i.confidence,securityWarning:this.generateSecurityWarning(t,i.detectedType)}:await this.validateSpreadsheetStructure(e,i.detectedType)}catch(a){return{isValid:!1,error:`Validation failed: ${a.message}`,filename:t}}}static async readFileHeader(e,t){const a=await e.slice(0,t).arrayBuffer();return new Uint8Array(a)}static detectFileTypeByContent(e,t){for(const[a,i]of Object.entries(u))for(const s of i)if(this.matchesSignature(e,s)){if(a==="webp"&&e.length>=12&&![87,69,66,80].every((o,l)=>e[8+l]===o)||a==="avi"&&e.length>=12&&![65,86,73,32].every((o,l)=>e[8+l]===o))continue;const n=s.length/16;return a==="zip"?{detectedType:"zip-based",confidence:.7,actualExtension:"zip"}:{detectedType:a,confidence:n,actualExtension:a}}return this.isZipFile(e)?{detectedType:"zip-based",confidence:.7,actualExtension:"zip"}:this.isTextFile(e)?{detectedType:"text-based",confidence:.6,actualExtension:"txt"}:{confidence:0}}static matchesSignature(e,t){return e.length<t.length?!1:t.every((a,i)=>e[i]===a)}static isZipFile(e){return u.zip.some(t=>this.matchesSignature(e,t))}static isTextFile(e){let t=0;const a=Math.min(e.length,512);for(let i=0;i<a;i++){const s=e[i];(s>=32&&s<=126||s===9||s===10||s===13)&&t++}return a>0&&t/a>.8}static isAllowedType(e){return["xls","zip-based","text-based"].includes(e)}static async validateSpreadsheetStructure(e,t){try{let a;if(t==="text-based"){const r=await e.text(),c=this.validateTextAsCSV(r);if(!c.isValid)return c;a=d(r,{type:"string"})}else{const r=await e.arrayBuffer();if(t==="zip-based"){const c=await this.validateZipAsExcel(r);if(!c.isValid)return c}a=d(r,{type:"array"})}if(!a.SheetNames||a.SheetNames.length===0)return{isValid:!1,error:"File does not contain valid spreadsheet data",detectedType:t,filename:e.name};const i=a.Sheets[a.SheetNames[0]],s=f.sheet_to_json(i,{header:1});if(s.length<2)return{isValid:!1,error:"Spreadsheet must contain at least a header row and one data row",detectedType:t,filename:e.name};const n=this.checkForBinaryJunk(s);return n.isValid?{isValid:!0,detectedType:t||"spreadsheet",filename:e.name,confidence:.95}:{...n,detectedType:t,filename:e.name,securityWarning:"File contains binary data that suggests it may be a disguised non-spreadsheet file"}}catch{return{isValid:!1,error:"File cannot be parsed as a valid spreadsheet",detectedType:t,filename:e.name}}}static validateTextAsCSV(e){const t=[{pattern:/<\s*html\s*>|<\s*!doctype\s+html/i,type:"HTML"},{pattern:/<\?xml\s+version/i,type:"XML"},{pattern:/^\s*[\{\[]/m,type:"JSON"},{pattern:/^\s*(?:function|var|const|let|import|export|class)/m,type:"JavaScript"},{pattern:/^\s*#include|^\s*int\s+main/m,type:"C/C++"},{pattern:/^\s*package\s+|^\s*import\s+java/m,type:"Java"}];for(const{pattern:s,type:n}of t)if(s.test(e))return{isValid:!1,error:`File appears to be ${n} code, not CSV data`,detectedType:n.toLowerCase(),securityWarning:"Potential code injection attempt detected"};const a=e.split(/\r?\n/).filter(s=>s.trim());return a.length<2?{isValid:!1,error:"CSV file must have at least 2 lines (header + data)"}:(a[0].match(/,/g)||[]).length===0?{isValid:!1,error:"File does not appear to be comma-separated (CSV)"}:{isValid:!0}}static async validateZipAsExcel(e){try{const t=d(e,{type:"array"});return{isValid:!0}}catch{return{isValid:!1,error:"ZIP file is not a valid Excel document",securityWarning:"File may be a disguised ZIP archive"}}}static checkForBinaryJunk(e){const t=Math.min(e.length,10),a=e[0]||[],i=e.slice(1,t),s=[JSON.stringify(a),...i.map(r=>JSON.stringify(r))].join(""),n=[{pattern:/[^\x20-\x7E\s]{20,}/,desc:"long sequences of non-printable characters"},{pattern:/\x00{3,}/,desc:"multiple null bytes"},{pattern:/[\x01-\x08\x0B\x0C\x0E-\x1F]{10,}/,desc:"control character sequences"},{pattern:/[ï¿½]{3,}/,desc:"replacement character sequences"}];for(const{pattern:r,desc:c}of n)if(r.test(s))return{isValid:!1,error:`File contains binary data (${c}). This usually indicates a non-spreadsheet file with a fake extension.`,securityWarning:"Binary data pattern detected - possible file type spoofing"};return{isValid:!0}}static generateSecurityWarning(e,t){return e.split(".").length>2?`SECURITY ALERT: File "${e}" has multiple extensions and is actually ${t.toUpperCase()}. This is a common attack vector.`:`File type mismatch: Claims to be a spreadsheet but is actually ${t.toUpperCase()}.`}}const m=async p=>{const e=await y.validateFile(p);return{isValid:e.isValid,error:e.error,securityWarning:e.securityWarning}};export{y as BulletproofFileValidator,m as bulletproofValidateFile};
